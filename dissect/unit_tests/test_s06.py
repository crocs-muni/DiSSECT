import unittest
import ast
from dissect.traits.s06.s06 import s06_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        "{'weight': 1}": {
            'Arithmetic mean': 110.7841796875,
            'Geometric mean': 110.77434121309813,
            'Quadratic mean': 110.79386828701307,
            'Harmonic mean': 110.76434947907656,
            'Variance': 3.293667154361745,
            'Standard deviation': 0.5591257536294992}},
    'bn158': {
        "{'weight': 1}": {
            'Arithmetic mean': 156.25048828125,
            'Geometric mean': 156.24404903803256,
            'Quadratic mean': 156.2568639117375,
            'Harmonic mean': 156.2375451165152,
            'Variance': 3.3271368264102517,
            'Standard deviation': 0.5515053632911388}},
    'brainpoolP160r1': {
        "{'weight': 1}": {
            'Arithmetic mean': 158.93701171875,
            'Geometric mean': 158.9309173667429,
            'Quadratic mean': 158.9430374698944,
            'Harmonic mean': 158.92475322310318,
            'Variance': 3.462373460126238,
            'Standard deviation': 0.5822172458796017}}}


class TestS06(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = s06_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = s06_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = s06_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
