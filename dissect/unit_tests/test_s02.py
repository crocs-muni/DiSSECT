import unittest
import ast
from dissect.traits.s02.s02 import s02_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        "{'weight': 1}": {
            'Arithmetic mean': 110.82794189453125,
            'Geometric mean': 110.81818992786575,
            'Quadratic mean': 110.83753060636982,
            'Harmonic mean': 110.80827005620883,
            'Variance': 0.518841838921946,
            'Standard deviation': 0.23333571757020005}},
    'bn158': {
        "{'weight': 1}": {
            'Arithmetic mean': 156.23321533203125,
            'Geometric mean': 156.22607796250705,
            'Quadratic mean': 156.24026707967735,
            'Harmonic mean': 156.21885306380895,
            'Variance': 0.4619551302303434,
            'Standard deviation': 0.22672161648033534}},
    'brainpoolP160r1': {
        "{'weight': 1}": {
            'Arithmetic mean': 158.90496826171875,
            'Geometric mean': 158.89832512670569,
            'Quadratic mean': 158.91152834307533,
            'Harmonic mean': 158.89159708259862,
            'Variance': 0.5280413251943196,
            'Standard deviation': 0.2421799968202652}}}


class TestS02(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = s02_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = s02_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = s02_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
