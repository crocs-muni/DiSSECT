import unittest
import ast
from dissect.traits.s01.s01 import s01_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        "{'comb': 0, 'weight': 1}": {
            'Arithmetic mean': 27.681997299194336,
            'Geometric mean': '3.24087091054171',
            'Quadratic mean': 7.432583121288211,
            'Harmonic mean': 447.7043965681441}},
    'bn158': {
        "{'comb': 0, 'weight': 1}": {
            'Arithmetic mean': 39.018813133239746,
            'Geometric mean': '0.000000000000000',
            'Quadratic mean': 8.827074592687442,
            'Harmonic mean': 629.0967719795538}},
    'brainpoolP160r1': {
        "{'comb': 0, 'weight': 1}": {
            'Arithmetic mean': 39.68703365325928,
            'Geometric mean': '0.000000000000000',
            'Quadratic mean': 8.902850067617507,
            'Harmonic mean': 639.7992191816217}}}


class TestS01(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = s01_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = s01_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = s01_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
