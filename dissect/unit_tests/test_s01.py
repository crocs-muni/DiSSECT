import unittest
import ast
from dissect.traits.s01.s01 import s01_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        "{'weight': 1}": {
            'Arithmetic mean': 109.09747314453125,
            'Geometric mean': 102.96004692393184,
            'Quadratic mean': 14.755179837306288,
            'Harmonic mean': 112.56836321037302,
            'Variance': 0.5377222174567595,
            'Standard deviation': 0.23726737695493916}},
    'bn158': {
        "{'weight': 1}": {
            'Arithmetic mean': 153.79168701171875,
            'Geometric mean': 144.36935564760688,
            'Quadratic mean': 17.524595578652093,
            'Harmonic mean': 158.69808749158298,
            'Variance': 0.47066929516102507,
            'Standard deviation': 0.228768593629154}},
    'brainpoolP160r1': {
        "{'weight': 1}": {
            'Arithmetic mean': 156.42266845703125,
            'Geometric mean': 146.80082636460662,
            'Quadratic mean': 17.674810487845406,
            'Harmonic mean': 161.41433871942706,
            'Variance': 0.5409391623069237,
            'Standard deviation': 0.24507160018161747}}}


class TestS01(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = s01_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = s01_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = s01_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
