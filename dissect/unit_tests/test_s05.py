import unittest
import ast
from dissect.traits.s05.s05 import s05_curve_function
from dissect.traits.example_curves import curve_names
results = {
    'secp112r2': {
        "{'weight': 1}": {
            'Arithmetic mean': 110.85107421875,
            'Geometric mean': 110.84140307588832,
            'Quadratic mean': 110.86058293034657,
            'Harmonic mean': 110.8315651913861,
            'Variance': 3.747745108785702,
            'Standard deviation': 0.5692916991781182}},
    'bn158': {
        "{'weight': 1}": {
            'Arithmetic mean': 156.251953125,
            'Geometric mean': 156.24535798655498,
            'Quadratic mean': 156.25847789500094,
            'Harmonic mean': 156.2386911872838,
            'Variance': 3.4738632171618646,
            'Standard deviation': 0.570035669106194}},
    'brainpoolP160r1': {
        "{'weight': 1}": {
            'Arithmetic mean': 158.96533203125,
            'Geometric mean': 158.95946425049888,
            'Quadratic mean': 158.97113197301343,
            'Harmonic mean': 158.95352719596565,
            'Variance': 3.6117278893979465,
            'Standard deviation': 0.5627922288945915}}}


class TestS05(unittest.TestCase):

    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["secp112r2"].keys())[0]).values()
        computed_result = s05_curve_function(curve_names["secp112r2"], *params)
        self.assertEqual(
            list(
                results["secp112r2"].values())[0],
            computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = s05_curve_function(curve_names["bn158"], *params)
        self.assertEqual(list(results["bn158"].values())[0], computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest"""
        params = ast.literal_eval(
            list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = s05_curve_function(
            curve_names["brainpoolP160r1"], *params)
        self.assertEqual(
            list(
                results["brainpoolP160r1"].values())[0],
            computed_result)


if __name__ == '__main__':
    unittest.main()
    print("Everything passed")
