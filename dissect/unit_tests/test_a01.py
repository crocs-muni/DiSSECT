import unittest, ast
from dissect.traits.a01.a01 import a01_curve_function
from dissect.traits.example_curves import curve_names
results={'secp112r2': {'{}': {'order': 1112921306273428674967732714786891, 'cofactor': 4}}, 'bn158': {'{}': {'order': 206327671360737302491015346511080613560608358413, 'cofactor': 1}}, 'brainpoolP160r1': {'{}': {'order': 1332297598440044874827085038830181364212942568457, 'cofactor': 1}}}

class TestA01(unittest.TestCase):
 
    def test_auto_generated_secp112r2(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["secp112r2"].keys())[0]).values()
        computed_result = a01_curve_function(curve_names["secp112r2"],*params)
        self.assertEqual(list(results["secp112r2"].values())[0],computed_result)

    def test_auto_generated_bn158(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["bn158"].keys())[0]).values()
        computed_result = a01_curve_function(curve_names["bn158"],*params)
        self.assertEqual(list(results["bn158"].values())[0],computed_result)

    def test_auto_generated_brainpoolP160r1(self):
        """This test has been auto-generated by gen_unittest""" 
        params = ast.literal_eval(list(results["brainpoolP160r1"].keys())[0]).values()
        computed_result = a01_curve_function(curve_names["brainpoolP160r1"],*params)
        self.assertEqual(list(results["brainpoolP160r1"].values())[0],computed_result)


if __name__ == '__main__':
   unittest.main()
   print("Everything passed")
